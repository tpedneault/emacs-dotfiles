#+TITLE: Emacs Configuration

* General Settings
** Set package archives
   #+BEGIN_SRC emacs-lisp
     (setq package-archives
	   '(("elpy" . "http://jorgenschaefer.github.io/packages/")
	     ("melpa" . "https://melpa.org/packages/")
	     ("gnu" . "http://elpa.gnu.org/packages/")
	     ("melpa-stable" . "https://stable.melpa.org/packages/")))
   #+END_SRC 
** Set default tab width
   #+BEGIN_SRC emacs-lisp
     (setq default-tab-width 2)
   #+END_SRC 
** Don't show startup messages
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
   #+END_SRC 
** Don't show toolbar
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
   #+END_SRC 
** Don't show menu
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
   #+END_SRC 
** Don't show scrollbar
   #+BEGIN_SRC emacs-lisp
     (toggle-scroll-bar -1)
   #+END_SRC 
** Show matching parenthesis 
   #+BEGIN_SRC emacs-lisp
     (show-paren-mode 1)
   #+END_SRC 
** Enable global line highlight mode
   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode +1)
   #+END_SRC 
** Enable global line number mode
   #+BEGIN_SRC emacs-lisp
     (global-display-line-numbers-mode)
   #+END_SRC 
** Disable auto indentation
   #+begin_src emacs-lisp
					     ;(when (fboundp 'electric-indent-mode) (electric-indent-mode -1))
   #+end_src
** Create command to reload configuration 
   #+begin_src emacs-lisp
     (defun reload-config () (interactive) (load-file "~/.emacs.d/init.el"))
   #+end_src
** Store backup / autosave files in tmp
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist
	   `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
	   `((".*" ,temporary-file-directory t)))
   #+END_SRC
* UI 
** Theme
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
     (load-theme 'atom-one-dark t)
   #+END_SRC
** Font 
   #+BEGIN_SRC emacs-lisp
     (set-frame-font "SpaceMono Nerd Font Mono 13" nil t)
   #+END_SRC
** Modeline 
   #+BEGIN_SRC emacs-lisp
     (use-package mood-line
       :ensure t
       :config (mood-line-mode))
     (use-package minions
       :ensure t)
   #+END_SRC
** Org-Mode
*** Bullets
    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
	:ensure t
	:config (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1))))
    #+END_SRC
* Modes
** C/C++ Mode
   #+BEGIN_SRC emacs-lisp

   #+END_SRC
* General Packages
** Evil 
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t
       :config (evil-ex-define-cmd "q" 'kill-this-buffer)
       (evil-ex-define-cmd "quit" 'evil-quit)
       (evil-define-key 'normal org-mode-map (kbd "C-SPC") 'org-cycle)
       (evil-mode 1))
   #+END_SRC
** LSP Mode 
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :commands (lsp lsp-deferred)
       :ensure t
       :init (setq lsp-keymap-prefix "C-l")
       :config (lsp-enable-which-key-integration t))

     (use-package lsp-ui
       :ensure t)

     ;; Go - lsp-mode
     ;; Set up before-save hooks to format buffer and add/delete imports.
     (defun lsp-go-install-save-hooks ()
       (add-hook 'before-save-hook #'lsp-format-buffer t t)
       (add-hook 'before-save-hook #'lsp-organize-imports t t))
     (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

     ;; Start LSP Mode and YASnippet mode
     (add-hook 'go-mode-hook #'lsp-deferred)
     (add-hook 'go-mode-hook #'yas-minor-mode)
   #+END_SRC
** Helm 
   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :ensure t
       :config
       (helm-autoresize-mode 1)
       (setq helm-autoresize-max-height 30)
       (helm-mode 1))

     (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)

     (global-set-key (kbd "C-x b") 'helm-buffers-list)
     (global-set-key (kbd "C-x r b") 'helm-bookmarks)
     (global-set-key (kbd "M-x") 'helm-M-x)
     (global-set-key (kbd "M-y") 'helm-show-kill-ring)
     (global-set-key (kbd "C-x C-f") 'helm-find-files)
   #+END_SRC
** Treemacs 
   #+BEGIN_SRC emacs-lisp
     (use-package treemacs
       :ensure t
       :defer t
       :init
       (with-eval-after-load 'winum
	 (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
       :config
       (progn
	 (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
	       treemacs-deferred-git-apply-delay      0.5
	       treemacs-directory-name-transformer    #'identity
	       treemacs-display-in-side-window        t
	       treemacs-eldoc-display                 t
	       treemacs-file-event-delay              5000
	       treemacs-file-extension-regex          treemacs-last-period-regex-value
	       treemacs-file-follow-delay             0.2
	       treemacs-file-name-transformer         #'identity
	       treemacs-follow-after-init             t
	       treemacs-git-command-pipe              ""
	       treemacs-goto-tag-strategy             'refetch-index
	       treemacs-indentation                   2
	       treemacs-indentation-string            " "
	       treemacs-is-never-other-window         nil
	       treemacs-max-git-entries               5000
	       treemacs-missing-project-action        'ask
	       treemacs-move-forward-on-expand        nil
	       treemacs-no-png-images                 nil
	       treemacs-no-delete-other-windows       t
	       treemacs-project-follow-cleanup        nil
	       treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	       treemacs-position                      'left
	       treemacs-read-string-input             'from-child-frame
	       treemacs-recenter-distance             0.1
	       treemacs-recenter-after-file-follow    nil
	       treemacs-recenter-after-tag-follow     nil
	       treemacs-recenter-after-project-jump   'always
	       treemacs-recenter-after-project-expand 'on-distance
	       treemacs-show-cursor                   nil
	       treemacs-show-hidden-files             t
	       treemacs-silent-filewatch              nil
	       treemacs-silent-refresh                nil
	       treemacs-sorting                       'alphabetic-asc
	       treemacs-space-between-root-nodes      t
	       treemacs-tag-follow-cleanup            t
	       treemacs-tag-follow-delay              1.5
	       treemacs-user-mode-line-format         nil
	       treemacs-user-header-line-format       nil
	       treemacs-width                         35
	       treemacs-workspace-switch-cleanup      nil)

	 ;; The default width and height of the icons is 22 pixels. If you are
	 ;; using a Hi-DPI display, uncomment this to double the icon size.
	 ;;(treemacs-resize-icons 44)

	 (treemacs-follow-mode t)
	 (treemacs-filewatch-mode t)
	 (treemacs-fringe-indicator-mode 'always)
	 (pcase (cons (not (null (executable-find "git")))
		      (not (null treemacs-python-executable)))
	   (`(t . t)
	    (treemacs-git-mode 'deferred))
	   (`(t . _)
	    (treemacs-git-mode 'simple))))
       :bind
       (:map global-map
	     ("M-0"       . treemacs-select-window)
	     ("C-x t 1"   . treemacs-delete-other-windows)
	     ("C-x t t"   . treemacs)
	     ("C-x t B"   . treemacs-bookmark)
	     ("C-x t C-t" . treemacs-find-file)
	     ("C-x t M-t" . treemacs-find-tag)))

     (use-package treemacs-evil
       :after (treemacs evil)
       :ensure t)

     (use-package treemacs-projectile
       :after (treemacs projectile)
       :ensure t)

     (use-package treemacs-icons-dired
       :after (treemacs dired)
       :ensure t
       :config (treemacs-icons-dired-mode))
   #+END_SRC
   
** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile 
       :ensure t
       :config (projectile-mode +1)
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
   #+END_SRC
** YASnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t)
    #+END_SRC
** Company 
   #+BEGIN_SRC emacs-lisp
     (use-package company
      :ensure t
      :bind (:map company-active-map
		  ("C-n" . company-select-next)
		  ("C-p" . company-select-previous))
      :config
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 1)
      (global-company-mode t))
     #+END_SRC
*** Company Irony C Headers
    #+BEGIN_SRC emacs-lisp
    (use-package company-irony-c-headers
	:ensure t)
    (eval-after-load 'company
	'(add-to-list
	    'company-backends '(company-irony-c-headers company-irony)))
    #+END_SRC
** RTags
   #+BEGIN_SRC emacs-lisp
     (use-package rtags
       :ensure t)
     (use-package company-rtags
       :ensure t)

     (eval-after-load 'company
     '(add-to-list
     'company-backends 'company-rtags))

     (use-package helm-rtags
	:ensure t
	:config (setq rtags-use-helm t))

    (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
    (setq company-backends (delete 'company-semantic company-backends))
    (eval-after-load 'company
    '(add-to-list 'company-backends 'company-irony))
     #+END_SRC
     
** Irony 
   #+BEGIN_SRC emacs-lisp
   (use-package irony
       :ensure t)

   (add-hook 'c++-mode-hook 'irony-mode)
   (add-hook 'c-mode-hook 'irony-mode)
   (add-hook 'objc-mode-hook 'irony-mode)

   (defun my-irony-mode-hook ()
   (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
   (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async))

    (add-hook 'irony-mode-hook 'my-irony-mode-hook)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
    #+END_SRC
** Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t)
     (add-hook 'c-mode-hook 'flycheck-mode)
     (add-hook 'c++-mode-hook 'flycheck-mode)

     (use-package flycheck-rtags
       :ensure t)

     (defun my-flycheck-rtags-setup ()
       (flycheck-select-checker 'rtags)
       (setq-local flycheck-highlighting-mode nil)
       (setq-local flycheck-check-syntax-automatically nil))

     (add-hook 'c-mode-common-hook #'my-flycheck-rtags-setup)

    (use-package flycheck-irony
       :ensure t)

    (eval-after-load 'flycheck
      '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
    #+END_SRC
** CMake IDE
   #+BEGIN_SRC emacs-lisp
   (use-package cmake-ide
     :ensure t
     :config (cmake-ide-setup))
   #+END_SRC
