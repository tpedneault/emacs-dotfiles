#+TITLE: Emacs Configuration

* General Settings
** Set package archives

   #+BEGIN_SRC emacs-lisp
     (setq package-archives
	   '(("elpy" . "http://jorgenschaefer.github.io/packages/")
	     ("melpa" . "https://melpa.org/packages/")
	     ("gnu" . "http://elpa.gnu.org/packages/")
	     ("melpa-stable" . "https://stable.melpa.org/packages/")))
   #+END_SRC 

** Set default tab width

   #+BEGIN_SRC emacs-lisp
     (setq default-tab-width 2)
   #+END_SRC 

** Don't show startup messages

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
   #+END_SRC 

** Don't show toolbar

   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
   #+END_SRC 

** Don't show menu

   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
   #+END_SRC 

** Don't show scrollbar

   #+BEGIN_SRC emacs-lisp
     (toggle-scroll-bar -1)
   #+END_SRC 

** Disable bell

   #+BEGIN_SRC emacs-lisp
     (setq visible-bell 1)
   #+END_SRC 

** Show matching parenthesis 

   #+BEGIN_SRC emacs-lisp
     (show-paren-mode 1)
   #+END_SRC 

** Enable global line highlight mode

   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode +1)
   #+END_SRC 

** Enable global line number mode

   #+BEGIN_SRC emacs-lisp
     (global-display-line-numbers-mode)
   #+END_SRC 

** Create command to reload configuration 

   #+BEGIN_SRC emacs-lisp
     (defun reload-config () (interactive) (load-file "~/.emacs.d/init.el"))
   #+END_SRC

** Store backup / autosave files in tmp

   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist
	   `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
	   `((".*" ,temporary-file-directory t)))
   #+END_SRC

* UI 
** Theme

   #+BEGIN_SRC emacs-lisp
     (load-theme 'zenburn t)
   #+END_SRC
   
** Font 

   #+BEGIN_SRC emacs-lisp
     (set-frame-font "Hack 11" nil t)
   #+END_SRC

** Modeline 

   #+BEGIN_SRC emacs-lisp
     (use-package doom-modeline
       :ensure t
       :init (doom-modeline-mode 1))
   #+END_SRC

** Org-Mode
*** Bullets

    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
	:ensure t
	:config (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1))))
    #+END_SRC

** Dashboard

   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :ensure t
       :config (dashboard-setup-startup-hook)
       (setq dashboard-set-heading-icons t)
       (setq dashboard-set-file-icons t))
   #+END_SRC

* Modes
* General Packages
** Evil 

   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t
       :init
       (setq evil-want-keybinding nil)
       :config 
       (evil-ex-define-cmd "q" 'kill-this-buffer)
       (evil-ex-define-cmd "quit" 'evil-quit)
       (evil-define-key 'normal org-mode-map (kbd "C-SPC") 'org-cycle)
       (evil-mode 1))

     (use-package evil-collection
       :ensure t
       :after evil
       :config (evil-collection-init))
   #+END_SRC

** Ivy

   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t
       :after ivy
       :config (counsel-mode))

     (use-package ivy
       :ensure t
       :defer 0.1
       :diminish
       :bind (("C-c C-r" . ivy-resume)
	      ("C-x B" . ivy-switch-buffer-other-window))
       :custom
       (ivy-count-format "(%d/%d) ")
       (ivy-use-virtual-buffers t)
       :config (ivy-mode))

     (use-package ivy-rich
       :ensure t
       :after ivy
       :init (ivy-rich-mode 1)
       :custom
       (ivy-virtual-abbreviate 'full
			       ivy-rich-switch-buffer-align-virtual-buffer t
			       ivy-rich-path-style 'abbrev)
       :config (ivy-set-display-transformer 'ivy-switch-buffer
					    'ivy-rich-switch-buffer-transformer))

     (use-package swiper
       :after ivy
       :bind (("C-s" . swiper)
	      ("C-r" . swiper)))
   #+END_SRC

** Treemacs 

   #+BEGIN_SRC emacs-lisp
     (use-package treemacs
       :ensure t
       :defer t
       :init
       (with-eval-after-load 'winum
	 (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
       :config
       (progn
	 (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
	       treemacs-deferred-git-apply-delay      0.5
	       treemacs-directory-name-transformer    #'identity
	       treemacs-display-in-side-window        t
	       treemacs-eldoc-display                 t
	       treemacs-file-event-delay              5000
	       treemacs-file-extension-regex          treemacs-last-period-regex-value
	       treemacs-file-follow-delay             0.2
	       treemacs-file-name-transformer         #'identity
	       treemacs-follow-after-init             t
	       treemacs-git-command-pipe              ""
	       treemacs-goto-tag-strategy             'refetch-index
	       treemacs-indentation                   2
	       treemacs-indentation-string            " "
	       treemacs-is-never-other-window         nil
	       treemacs-max-git-entries               5000
	       treemacs-missing-project-action        'ask
	       treemacs-move-forward-on-expand        nil
	       treemacs-no-png-images                 nil
	       treemacs-no-delete-other-windows       t
	       treemacs-project-follow-cleanup        nil
	       treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	       treemacs-position                      'left
	       treemacs-read-string-input             'from-child-frame
	       treemacs-recenter-distance             0.1
	       treemacs-recenter-after-file-follow    nil
	       treemacs-recenter-after-tag-follow     nil
	       treemacs-recenter-after-project-jump   'always
	       treemacs-recenter-after-project-expand 'on-distance
	       treemacs-show-cursor                   nil
	       treemacs-show-hidden-files             t
	       treemacs-silent-filewatch              nil
	       treemacs-silent-refresh                nil
	       treemacs-sorting                       'alphabetic-asc
	       treemacs-space-between-root-nodes      t
	       treemacs-tag-follow-cleanup            t
	       treemacs-tag-follow-delay              1.5
	       treemacs-user-mode-line-format         nil
	       treemacs-user-header-line-format       nil
	       treemacs-width                         35
	       treemacs-workspace-switch-cleanup      nil)

	 ;; The default width and height of the icons is 22 pixels. If you are
	 ;; using a Hi-DPI display, uncomment this to double the icon size.
	 ;;(treemacs-resize-icons 44)

	 (treemacs-follow-mode t)
	 (treemacs-filewatch-mode t)
	 (treemacs-fringe-indicator-mode 'always)
	 (pcase (cons (not (null (executable-find "git")))
		      (not (null treemacs-python-executable)))
	   (`(t . t)
	    (treemacs-git-mode 'deferred))
	   (`(t . _)
	    (treemacs-git-mode 'simple))))
       :bind
       (:map global-map
	     ("M-0"       . treemacs-select-window)
	     ("C-x t 1"   . treemacs-delete-other-windows)
	     ("C-x t t"   . treemacs)
	     ("C-x t B"   . treemacs-bookmark)
	     ("C-x t C-t" . treemacs-find-file)
	     ("C-x t M-t" . treemacs-find-tag)))

     (use-package treemacs-evil
       :after (treemacs evil)
       :ensure t)

     (use-package treemacs-projectile
       :after (treemacs projectile)
       :ensure t)

     (use-package treemacs-icons-dired
       :after (treemacs dired)
       :ensure t
       :config (treemacs-icons-dired-mode))
   #+END_SRC
   
** Which Key
   
   This package displays available keybindings in a popup window.

   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config (which-key-mode))
   #+END_SRC

** Programming

*** LSP Mode

    Set up the client for Language Server Protocol. Used to provide IDE like functionality.

    To add an lsp server, use the *M-x lsp-install-server* to install the required packages, or follow documentation.

    documentation: https://emacs-lsp.github.io/lsp-mode/page/languages/

    LSP Keymap: C-c l

    #+BEGIN_SRC emacs-lisp

      (use-package lsp-mode
        :ensure t
        :init (setq lsp-keymap-prefix "C-c l")
        :hook (lsp-mode . lsp-enable-which-key-integration)
        :commands (lsp lsp-deferred))

    #+END_SRC
    
    Some missing IDE functionality includes: fancy sideline, popup documentation, code peeking, etc.
    Including the lsp-ui package adds these to Emacs.

    #+BEGIN_SRC emacs-lisp

      (use-package lsp-ui
        :ensure t
        :after lsp
        :commands lsp-ui-mode)

    #+END_SRC
    
    Since we are using Ivy, we need to enable Ivy support.

    #+BEGIN_SRC emacs-lisp

      (use-package lsp-ivy
	:ensure t
	:commands lsp-ivy-workspace-symbol)

    #+END_SRC
    
    As well as enable Treemacs support.

    #+BEGIN_SRC emacs-lisp

      (use-package lsp-treemacs 
	:ensure t 
	:commands lsp-treemacs-errors-list)

    #+END_SRC

    Other packages can be added here if required (ex: dap-mode support for debugger)


*** Syntax Checking

    We are going to be using FlyCheck. This package provides syntax checking with minimal configuration required.
    Another alternative available on MELPA is FlyMake.

    To see which languages are supported: https://www.flycheck.org/en/latest/languages.html#flycheck-languages

    #+BEGIN_SRC emacs-lisp

      (use-package flycheck
	:ensure t
	:init (global-flycheck-mode))

    #+END_SRC

**** Language Specific Configuration

***** C/C++
